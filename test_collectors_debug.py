"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
"""
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def test_news_collector():
    """–¢–µ—Å—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ –ö–û–õ–õ–ï–ö–¢–û–†–ê –ù–û–í–û–°–¢–ï–ô (RSS)")
    print("="*60)
    
    try:
        from collectors.news_collector_light import NewsCollectorLight
        
        collector = NewsCollectorLight()
        print(f"\nüìå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {collector.keywords}")
        print(f"üìå RSS URL: {collector.rss_url}")
        
        print("\n‚ñ∂ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        articles = collector.collect()
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
        
        if articles:
            print("\nüì∞ –ü–µ—Ä–≤—ã–µ 3 –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
            for i, article in enumerate(articles[:3], 1):
                print(f"\n{i}. {article.get('text', '')[:150]}...")
                print(f"   URL: {article.get('url', 'N/A')}")
        else:
            print("\n‚ö† –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  1. RSS –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–µ–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏")
            print("  2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ RSS")
            print("  3. –ò–∑–º–µ–Ω–∏–ª—Å—è —Ñ–æ—Ä–º–∞—Ç RSS")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    return articles if 'articles' in locals() else []

def test_telegram_collector():
    """–¢–µ—Å—Ç Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ TELEGRAM –ö–û–õ–õ–ï–ö–¢–û–†–ê")
    print("="*60)
    
    try:
        from collectors.telegram_user_collector import TelegramUserCollector
        from config import Config
        
        collector = TelegramUserCollector()
        
        print(f"\nüìå API ID: {'‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω' if collector.api_id else '‚úó –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"üìå API Hash: {'‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω' if collector.api_hash else '‚úó –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"üìå –¢–µ–ª–µ—Ñ–æ–Ω: {collector.phone if collector.phone else '‚úó –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {len(collector.channels)}")
        
        if not collector.api_id or not collector.api_hash:
            print("\n‚ö† Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            print("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org")
            print("  2. –ü–æ–ª—É—á–∏—Ç–µ API_ID –∏ API_HASH")
            print("  3. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
            return []
        
        if collector.channels:
            print(f"\nüìã –ü–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤:")
            for channel in collector.channels[:5]:
                print(f"   - {channel}")
        
        print("\n‚ñ∂ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–∑ Telegram (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        
        messages = collector.collect()
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        if messages:
            print("\nüí¨ –ü–µ—Ä–≤—ã–µ 3 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for i, msg in enumerate(messages[:3], 1):
                print(f"\n{i}. –ö–∞–Ω–∞–ª: {msg.get('author', 'N/A')}")
                print(f"   –¢–µ–∫—Å—Ç: {msg.get('text', '')[:150]}...")
                print(f"   URL: {msg.get('url', 'N/A')}")
        else:
            print("\n‚ö† –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("  1. –í –∫–∞–Ω–∞–ª–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¢–ù–° —ç–Ω–µ—Ä–≥–æ –ù–ù")
            print("  2. –§–∏–ª—å—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ")
            print("  3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ Telegram")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    return messages if 'messages' in locals() else []

def test_vk_collector():
    """–¢–µ—Å—Ç VK –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ VK –ö–û–õ–õ–ï–ö–¢–û–†–ê")
    print("="*60)
    
    try:
        from collectors.vk_collector import VKCollector
        
        collector = VKCollector()
        
        print(f"\nüìå VK Token: {'‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω' if collector.access_token else '‚úó –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        print(f"üìå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {collector.search_query}")
        
        if not collector.access_token:
            print("\n‚ö† VK —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return []
        
        print("\n‚ñ∂ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–∑ VK...")
        posts = collector.collect()
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        
        if posts:
            print("\nüìù –ü–µ—Ä–≤—ã–µ 3 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞:")
            for i, post in enumerate(posts[:3], 1):
                print(f"\n{i}. {post.get('text', '')[:150]}...")
        else:
            print("\n‚ö† –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    
    return posts if 'posts' in locals() else []

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ UTF-8
    import sys
    import codecs
    if sys.platform == 'win32':
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
    
    print("\n" + "="*60)
    print("DIAGNOSTIKA KOLLEKTOROV")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from config import Config
    print(f"\nKonfiguracija:")
    print(f"  Kljuchevye slova: {Config.COMPANY_KEYWORDS}")
    print(f"  Geo-filtr: {'Vkluchen' if Config.GEO_FILTER_ENABLED else 'Vykluchen'}")
    print(f"  Jazykovoj filtr: {'Vkluchen' if Config.LANGUAGE_FILTER_ENABLED else 'Vykluchen'}")
    
    # –¢–µ—Å—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
    news = test_news_collector()
    telegram = test_telegram_collector()
    vk = test_vk_collector()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("ITOGI DIAGNOSTIKI")
    print("="*60)
    print(f"Novosti (RSS): {len(news)} statej")
    print(f"Telegram: {len(telegram)} soobshhenij")
    print(f"VK: {len(vk)} postov")
    print(f"VSEGO: {len(news) + len(telegram) + len(vk)} zapisej")
    print("="*60)
