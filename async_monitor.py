"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤
"""
import asyncio
import logging
from datetime import datetime
from models import db, Review, MonitoringLog
from collectors.vk_collector import VKCollector
try:
    from collectors.telegram_user_collector import TelegramUserCollector as TelegramCollector
except ImportError:
    from collectors.telegram_collector import TelegramCollector
from collectors.news_collector import NewsCollector
from analyzers.sentiment_analyzer import SentimentAnalyzer
from analyzers.moderator import Moderator
from config import Config
from app import app
import threading

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AsyncReviewMonitor:
    def __init__(self):
        self.sentiment_analyzer = SentimentAnalyzer()
        self.vk_collector = VKCollector()
        self.telegram_collector = TelegramCollector()
        self.news_collector = NewsCollector(sentiment_analyzer=self.sentiment_analyzer)
        self.moderator = Moderator()
        self.is_running = False
    
    async def collect_from_source_async(self, source_name, collect_callable):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        log = None
        log_id = None
        
        try:
            logger.info(f"")
            logger.info(f"{'='*60}")
            logger.info(f"[{source_name.upper()}] –≠–¢–ê–ü 1/4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∞")
            logger.info(f"{'='*60}")
            
            with app.app_context():
                log = MonitoringLog(source=source_name, status='running')
                db.session.add(log)
                db.session.commit()
                log_id = log.id
            
            logger.info(f"[{source_name.upper()}] ‚úì –õ–æ–≥ —Å–æ–∑–¥–∞–Ω (ID: {log_id})")
            logger.info(f"")
            logger.info(f"[{source_name.upper()}] –≠–¢–ê–ü 2/4: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
            
            loop = asyncio.get_event_loop()
            reviews = await loop.run_in_executor(None, collect_callable)
            
            logger.info(f"[{source_name.upper()}] ‚úì –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(reviews)}")
            logger.info(f"")
            logger.info(f"[{source_name.upper()}] –≠–¢–ê–ü 3/4: –ê–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è...")
            
            reviews_added = 0
            
            with app.app_context():
                processed_count = 0
                for review_data in reviews:
                    processed_count += 1
                    try:
                        if processed_count % 5 == 0:
                            logger.info(f"[{source_name.upper()}]   ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{len(reviews)}")
                        
                        existing = Review.query.filter_by(
                            source_id=review_data['source_id']
                        ).first()
                        
                        if existing:
                            logger.debug(f"[{source_name.upper()}] –û—Ç–∑—ã–≤ {review_data['source_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            continue
                        
                        sentiment = self.sentiment_analyzer.analyze(review_data['text'])
                        keywords = self.sentiment_analyzer.extract_keywords(review_data['text'])
                        
                        moderation_status, moderation_reason, requires_manual = self.moderator.moderate(
                            review_data['text'],
                            sentiment['sentiment_score']
                        )
                        
                        review = Review(
                            source=review_data['source'],
                            source_id=review_data['source_id'],
                            author=review_data.get('author'),
                            author_id=review_data.get('author_id'),
                            text=review_data['text'],
                            url=review_data.get('url'),
                            published_date=review_data.get('published_date'),
                            sentiment_score=sentiment['sentiment_score'],
                            sentiment_label=sentiment['sentiment_label'],
                            keywords=','.join(keywords) if keywords else None,
                            moderation_status=moderation_status,
                            moderation_reason=moderation_reason,
                            requires_manual_review=requires_manual,
                            processed=not requires_manual
                        )
                        
                        db.session.add(review)
                        reviews_added += 1
                        
                    except Exception as e:
                        logger.error(f"[{source_name.upper()}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
                        continue
                
                logger.info(f"")
                logger.info(f"[{source_name.upper()}] –≠–¢–ê–ü 4/4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                
                db.session.commit()
                
                if log_id:
                    log = MonitoringLog.query.get(log_id)
                    if log:
                        log.completed_at = datetime.utcnow()
                        log.status = 'success'
                        log.reviews_collected = reviews_added
                        db.session.commit()
            
            logger.info(f"")
            logger.info(f"[{source_name.upper()}] {'='*60}")
            logger.info(f"[{source_name.upper()}] ‚úì –ó–ê–í–ï–†–®–ï–ù–û")
            logger.info(f"[{source_name.upper()}]   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(reviews)}")
            logger.info(f"[{source_name.upper()}]   –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {reviews_added}")
            logger.info(f"[{source_name.upper()}]   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {len(reviews) - reviews_added}")
            logger.info(f"[{source_name.upper()}] {'='*60}")
            
            return {'source': source_name, 'success': True, 'count': reviews_added}
            
        except Exception as e:
            logger.error(f"")
            logger.error(f"[{source_name.upper()}] {'='*60}")
            logger.error(f"[{source_name.upper()}] ‚úó –û–®–ò–ë–ö–ê")
            logger.error(f"[{source_name.upper()}]   {str(e)}")
            logger.error(f"[{source_name.upper()}] {'='*60}")
            
            try:
                with app.app_context():
                    if log_id:
                        log = MonitoringLog.query.get(log_id)
                        if log:
                            log.completed_at = datetime.utcnow()
                            log.status = 'error'
                            log.error_message = str(e)
                            db.session.commit()
            except Exception as db_error:
                logger.error(f"[{source_name.upper()}] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {db_error}")
            
            return {'source': source_name, 'success': False, 'error': str(e)}
    
    async def run_collection_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        start_time = datetime.utcnow()
        
        logger.info("")
        logger.info("‚ïî" + "‚ïê" * 78 + "‚ïó")
        logger.info("‚ïë" + " " * 20 + "–ó–ê–ü–£–°–ö –¶–ò–ö–õ–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê" + " " * 34 + "‚ïë")
        logger.info("‚ïë" + " " * 25 + "(–ê–°–ò–ù–•–†–û–ù–ù–´–ô –†–ï–ñ–ò–ú)" + " " * 35 + "‚ïë")
        logger.info("‚ïö" + "‚ïê" * 78 + "‚ïù")
        logger.info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("")
        logger.info("üìä –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏–∑ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
        logger.info("   1Ô∏è‚É£  VK (–í–ö–æ–Ω—Ç–∞–∫—Ç–µ)")
        logger.info("   2Ô∏è‚É£  Telegram (–∫–∞–Ω–∞–ª—ã)")
        logger.info("   3Ô∏è‚É£  News (–Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã)")
        logger.info("")
        
        self.is_running = True
        
        def call_with_comments(collector):
            def _call():
                try:
                    return collector.collect(collect_comments=True)
                except TypeError:
                    return collector.collect()
            return _call

        tasks = [
            self.collect_from_source_async('vk', lambda: self.vk_collector.collect()),
            self.collect_from_source_async('telegram', call_with_comments(self.telegram_collector)),
            self.collect_from_source_async('news', lambda: self.news_collector.collect_with_comments()),
        ]
        
        logger.info("‚ö° –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        logger.info("")
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = datetime.utcnow()
        duration = (end_time - start_time).total_seconds()
        
        logger.info("")
        logger.info("‚ïî" + "‚ïê" * 78 + "‚ïó")
        logger.info("‚ïë" + " " * 25 + "–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´" + " " * 35 + "‚ïë")
        logger.info("‚ïö" + "‚ïê" * 78 + "‚ïù")
        logger.info("")
        
        total_collected = 0
        success_count = 0
        error_count = 0
        
        for result in results:
            if isinstance(result, Exception):
                error_count += 1
                logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {result}")
            elif isinstance(result, dict):
                if result.get('success'):
                    count = result.get('count', 0)
                    total_collected += count
                    success_count += 1
                    source_emoji = {'vk': '1Ô∏è‚É£', 'telegram': '2Ô∏è‚É£', 'news': '3Ô∏è‚É£'}.get(result['source'], 'üìå')
                    logger.info(f"{source_emoji}  {result['source'].upper():<12} ‚Üí ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ: {count:>3} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                else:
                    error_count += 1
                    source_emoji = {'vk': '1Ô∏è‚É£', 'telegram': '2Ô∏è‚É£', 'news': '3Ô∏è‚É£'}.get(result['source'], 'üìå')
                    logger.error(f"{source_emoji}  {result['source'].upper():<12} ‚Üí ‚úó –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")
        
        logger.info("")
        logger.info("‚îÄ" * 80)
        logger.info(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {success_count}/3")
        logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {error_count}")
        logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_collected} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
        logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("‚îÄ" * 80)
        logger.info("")
        
        if total_collected > 0:
            logger.info("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        elif error_count == 3:
            logger.warning("‚ö†Ô∏è  –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫–∏!")
        else:
            logger.info("‚ÑπÔ∏è  –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
        
        logger.info("")
        
        self.is_running = False
        return total_collected
    
    def run_collection_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Flask"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(self.run_collection_async())
            loop.close()
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ: {e}")
            raise
    
    async def start_scheduler_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        interval_seconds = Config.MONITORING_INTERVAL_MINUTES * 60
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: {Config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
        
        await self.run_collection_async()
        
        while True:
            try:
                await asyncio.sleep(interval_seconds)
                if not self.is_running:
                    await self.run_collection_async()
                else:
                    logger.warning("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            except asyncio.CancelledError:
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)

def run_monitor_background():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    with app.app_context():
        db.create_all()
    
    monitor = AsyncReviewMonitor()
    
    try:
        asyncio.run(monitor.start_scheduler_async())
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == '__main__':
    run_monitor_background()
