"""
–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (–±—ã—Å—Ç—Ä–µ–µ)
"""
from models import db, Review, MonitoringLog
from collectors.vk_collector import VKCollector
try:
    from collectors.telegram_user_collector import TelegramUserCollector as TelegramCollector
except ImportError:
    from collectors.telegram_collector import TelegramCollector
try:
    from collectors.news_collector import NewsCollector
except ImportError:
    from collectors.web_collector import WebCollector as NewsCollector
from analyzers.sentiment_analyzer import SentimentAnalyzer
from analyzers.moderator import Moderator
from config import Config
from app import app
from datetime import datetime
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
Config.USE_FREE_PROXIES = 'False'

def collect_once():
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info("=" * 70)
    logger.info("–ó–ê–ü–£–°–ö –ï–î–ò–ù–û–†–ê–ó–û–í–û–ì–û –°–ë–û–†–ê –î–ê–ù–ù–´–• (–ë–ï–ó –ü–†–û–ö–°–ò)")
    logger.info("=" * 70)
    
    vk_collector = VKCollector()
    telegram_collector = TelegramCollector()
    news_collector = NewsCollector()
    news_collector.use_free_proxies = False
    news_collector.current_proxy = None
    
    sentiment_analyzer = SentimentAnalyzer()
    moderator = Moderator()
    
    all_reviews = []
    
    # 1. VK
    logger.info("\n1Ô∏è‚É£ –°–±–æ—Ä –∏–∑ VK...")
    try:
        vk_reviews = vk_collector.collect()
        logger.info(f"‚úì VK: –Ω–∞–π–¥–µ–Ω–æ {len(vk_reviews)} –æ—Ç–∑—ã–≤–æ–≤")
        all_reviews.extend(vk_reviews)
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ VK: {e}")
    
    # 2. Telegram
    logger.info("\n2Ô∏è‚É£ –°–±–æ—Ä –∏–∑ Telegram...")
    try:
        tg_reviews = telegram_collector.collect()
        logger.info(f"‚úì Telegram: –Ω–∞–π–¥–µ–Ω–æ {len(tg_reviews)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        all_reviews.extend(tg_reviews)
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ Telegram: {e}")
    
    # 3. –ù–æ–≤–æ—Å—Ç–∏
    logger.info("\n3Ô∏è‚É£ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–ë–ï–ó –ø—Ä–æ–∫—Å–∏)...")
    try:
        news = news_collector.collect()
        logger.info(f"‚úì –ù–æ–≤–æ—Å—Ç–∏: –Ω–∞–π–¥–µ–Ω–æ {len(news)} —Å—Ç–∞—Ç–µ–π")
        all_reviews.extend(news)
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    logger.info(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_reviews)} –∑–∞–ø–∏—Å–µ–π")
    
    saved = 0
    with app.app_context():
        for review_data in all_reviews:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            existing = Review.query.filter_by(source_id=review_data['source_id']).first()
            if existing:
                continue
            
            # –ê–Ω–∞–ª–∏–∑
            sentiment = sentiment_analyzer.analyze(review_data['text'])
            keywords = sentiment_analyzer.extract_keywords(review_data['text'])
            
            moderation_status, moderation_reason, requires_manual = moderator.moderate(
                review_data['text'],
                sentiment['sentiment_score']
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            review = Review(
                source=review_data['source'],
                source_id=review_data['source_id'],
                author=review_data.get('author'),
                author_id=review_data.get('author_id'),
                text=review_data['text'],
                url=review_data.get('url'),
                published_date=review_data.get('published_date'),
                sentiment_score=sentiment['sentiment_score'],
                sentiment_label=sentiment['sentiment_label'],
                keywords=','.join(keywords) if keywords else None,
                moderation_status=moderation_status,
                moderation_reason=moderation_reason,
                requires_manual_review=requires_manual,
                processed=not requires_manual
            )
            
            db.session.add(review)
            saved += 1
        
        db.session.commit()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = Review.query.count()
        
        logger.info("\n" + "=" * 70)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ê")
        logger.info("=" * 70)
        logger.info(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {saved}")
        logger.info(f"‚úì –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {total} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        vk_count = Review.query.filter_by(source='vk').count()
        tg_count = Review.query.filter_by(source='telegram').count()
        news_count = Review.query.filter(Review.source.in_(['news', 'web'])).count()
        
        logger.info(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        logger.info(f"  VK: {vk_count}")
        logger.info(f"  Telegram: {tg_count}")
        logger.info(f"  –ù–æ–≤–æ—Å—Ç–∏: {news_count}")
        
        # –ü–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        positive = Review.query.filter_by(sentiment_label='positive').count()
        negative = Review.query.filter_by(sentiment_label='negative').count()
        neutral = Review.query.filter_by(sentiment_label='neutral').count()
        
        logger.info(f"\n–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        logger.info(f"  –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive}")
        logger.info(f"  –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative}")
        logger.info(f"  –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {neutral}")
        
        logger.info("\n‚úì –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("=" * 70)

if __name__ == '__main__':
    collect_once()
