"""
–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (–±—ã—Å—Ç—Ä–µ–µ)
"""
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

from models import db, Review, MonitoringLog
from collectors.vk_collector import VKCollector
try:
    from collectors.telegram_user_collector import TelegramUserCollector as TelegramCollector
except ImportError:
    from collectors.telegram_collector import TelegramCollector
try:
    from collectors.news_collector import NewsCollector
except ImportError:
    from collectors.web_collector import WebCollector as NewsCollector
try:
    from collectors.zen_selenium_collector import ZenSeleniumCollector
    ZenCollector = ZenSeleniumCollector  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Selenium –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏
except ImportError:
    try:
        from collectors.zen_collector import ZenCollector
    except ImportError:
        ZenCollector = None
try:
    from collectors.ok_selenium_collector import OKSeleniumCollector as OKAPICollector
    logger.info("OK Selenium –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (–æ–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API)")
except ImportError:
    try:
        from collectors.ok_api_collector import OKAPICollector
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OK API –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)")
    except ImportError:
        try:
            from collectors.ok_collector import OKCollector as OKAPICollector
        except ImportError:
            OKAPICollector = None
            logger.warning("OK –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
from analyzers.sentiment_analyzer import SentimentAnalyzer
from analyzers.moderator import Moderator
from config import Config
from app_enhanced import app

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
Config.USE_FREE_PROXIES = 'False'

def collect_once():
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info("=" * 70)
    logger.info("–ó–ê–ü–£–°–ö –ï–î–ò–ù–û–†–ê–ó–û–í–û–ì–û –°–ë–û–†–ê –î–ê–ù–ù–´–• (–ë–ï–ó –ü–†–û–ö–°–ò)")
    logger.info("=" * 70)
    logger.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    vk_collector = VKCollector()
    telegram_collector = TelegramCollector()
    news_collector = NewsCollector()
    news_collector.use_free_proxies = False
    news_collector.current_proxy = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
    zen_collector = ZenCollector() if ZenCollector else None
    ok_collector = OKAPICollector() if OKAPICollector else None
    
    sentiment_analyzer = SentimentAnalyzer()
    moderator = Moderator()
    
    # –ü–µ—Ä–µ–¥–∞–µ–º sentiment_analyzer –≤–æ –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
    vk_collector.sentiment_analyzer = sentiment_analyzer
    telegram_collector.sentiment_analyzer = sentiment_analyzer
    news_collector.sentiment_analyzer = sentiment_analyzer
    if zen_collector:
        zen_collector.sentiment_analyzer = sentiment_analyzer
    if ok_collector:
        ok_collector.sentiment_analyzer = sentiment_analyzer
    
    all_reviews = []
    
    # 1. VK
    logger.info("\n1Ô∏è‚É£ –°–±–æ—Ä –∏–∑ VK...")
    try:
        vk_reviews = vk_collector.collect()
        logger.info(f"‚úì VK: –Ω–∞–π–¥–µ–Ω–æ {len(vk_reviews)} –æ—Ç–∑—ã–≤–æ–≤")
        all_reviews.extend(vk_reviews)
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ VK: {e}")
    
    # 2. Telegram
    logger.info("\n2Ô∏è‚É£ –°–±–æ—Ä –∏–∑ Telegram (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)...")
    try:
        tg_reviews = telegram_collector.collect(collect_comments=True)
        messages = [r for r in tg_reviews if not r.get('is_comment', False)]
        comments = [r for r in tg_reviews if r.get('is_comment', False)]
        logger.info(f"‚úì Telegram: –Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        all_reviews.extend(tg_reviews)
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ Telegram: {e}")
    
    # 3. –ù–æ–≤–æ—Å—Ç–∏
    logger.info("\n3Ô∏è‚É£ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–ë–ï–ó –ø—Ä–æ–∫—Å–∏, —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)...")
    try:
        news = news_collector.collect_with_comments()
        articles = [r for r in news if not r.get('is_comment', False)]
        comments = [r for r in news if r.get('is_comment', False)]
        logger.info(f"‚úì –ù–æ–≤–æ—Å—Ç–∏: –Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π, {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        all_reviews.extend(news)
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    
    # 4. –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω (—á–µ—Ä–µ–∑ Selenium –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏)
    if zen_collector:
        logger.info("\n4Ô∏è‚É£ –°–±–æ—Ä –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω (Selenium - –æ–±—Ö–æ–¥ –∫–∞–ø—á–∏)...")
        logger.info("   –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...")
        try:
            zen_posts = zen_collector.collect(collect_comments=True)
            articles = [r for r in zen_posts if not r.get('is_comment', False)]
            comments = [r for r in zen_posts if r.get('is_comment', False)]
            logger.info(f"‚úì –î–∑–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π, {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            all_reviews.extend(zen_posts)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –î–∑–µ–Ω: {e}")
    
    # 5. –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏
    if ok_collector:
        logger.info("\n5Ô∏è‚É£ –°–±–æ—Ä –∏–∑ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤...")
        try:
            ok_posts = ok_collector.collect()
            logger.info(f"‚úì –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: –Ω–∞–π–¥–µ–Ω–æ {len(ok_posts)} –ø–æ—Å—Ç–æ–≤")
            all_reviews.extend(ok_posts)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    logger.info(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_reviews)} –∑–∞–ø–∏—Å–µ–π")
    
    saved = 0
    parent_mapping = {}
    
    with app.app_context():
        for review_data in all_reviews:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            existing = Review.query.filter_by(source_id=review_data['source_id']).first()
            if existing:
                # Store mapping for parent-child relationships
                if not review_data.get('is_comment', False):
                    parent_mapping[review_data['source_id']] = existing.id
                continue
            
            # –ê–Ω–∞–ª–∏–∑
            sentiment = sentiment_analyzer.analyze(review_data['text'])
            keywords = sentiment_analyzer.extract_keywords(review_data['text'])
            
            moderation_status, moderation_reason, requires_manual = moderator.moderate(
                review_data['text'],
                sentiment['sentiment_score']
            )
            
            # Determine parent_id for comments
            parent_id = None
            if review_data.get('is_comment', False):
                parent_source_id = review_data.get('parent_source_id')
                if parent_source_id:
                    parent_id = parent_mapping.get(parent_source_id)
                    if not parent_id:
                        parent = Review.query.filter_by(source_id=parent_source_id).first()
                        if parent:
                            parent_id = parent.id
                            parent_mapping[parent_source_id] = parent_id
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            review = Review(
                source=review_data['source'],
                source_id=review_data['source_id'],
                author=review_data.get('author'),
                author_id=review_data.get('author_id'),
                text=review_data['text'],
                url=review_data.get('url'),
                published_date=review_data.get('published_date'),
                sentiment_score=sentiment['sentiment_score'],
                sentiment_label=sentiment['sentiment_label'],
                keywords=','.join(keywords) if keywords else None,
                moderation_status=moderation_status,
                moderation_reason=moderation_reason,
                requires_manual_review=requires_manual,
                processed=not requires_manual,
                parent_id=parent_id,
                is_comment=review_data.get('is_comment', False)
            )
            
            db.session.add(review)
            saved += 1
            
            # Store new parent for future children
            if not review_data.get('is_comment', False):
                db.session.flush()
                parent_mapping[review_data['source_id']] = review.id
        
        db.session.commit()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = Review.query.count()
        articles_count = Review.query.filter_by(is_comment=False).count()
        comments_count = Review.query.filter_by(is_comment=True).count()
        
        logger.info("\n" + "=" * 70)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ê")
        logger.info("=" * 70)
        logger.info(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {saved}")
        logger.info(f"‚úì –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {total} –∑–∞–ø–∏—Å–µ–π ({articles_count} —Å—Ç–∞—Ç–µ–π, {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
        
        # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        vk_count = Review.query.filter_by(source='vk', is_comment=False).count()
        tg_count = Review.query.filter_by(source='telegram', is_comment=False).count()
        news_count = Review.query.filter(Review.source.in_(['news', 'web']), Review.is_comment==False).count()
        zen_count = Review.query.filter_by(source='zen', is_comment=False).count()
        ok_count = Review.query.filter_by(source='ok', is_comment=False).count()
        
        logger.info(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (—Å—Ç–∞—Ç—å–∏):")
        logger.info(f"  VK: {vk_count}")
        logger.info(f"  Telegram: {tg_count}")
        logger.info(f"  –ù–æ–≤–æ—Å—Ç–∏: {news_count}")
        logger.info(f"  –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω: {zen_count}")
        logger.info(f"  –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {ok_count}")
        
        # –ü–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        positive = Review.query.filter_by(sentiment_label='positive').count()
        negative = Review.query.filter_by(sentiment_label='negative').count()
        neutral = Review.query.filter_by(sentiment_label='neutral').count()
        
        logger.info(f"\n–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        logger.info(f"  –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive}")
        logger.info(f"  –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative}")
        logger.info(f"  –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {neutral}")
        
        logger.info("\n‚úì –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("=" * 70)

if __name__ == '__main__':
    collect_once()
