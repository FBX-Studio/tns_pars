"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
"""
import logging
from app_enhanced import app
from models import db, Review
from analyzers.sentiment_analyzer import SentimentAnalyzer

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def reanalyze_all():
    """–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–∞–∑–µ"""
    
    logger.info("=" * 60)
    logger.info("–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤")
    logger.info("=" * 60)
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
        reviews = Review.query.all()
        total = len(reviews)
        
        if total == 0:
            logger.info("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {total}")
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SentimentAnalyzer()
        
        # –°—á–µ—Ç—á–∏–∫–∏
        updated = 0
        positive = 0
        negative = 0
        neutral = 0
        errors = 0
        
        logger.info("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...")
        
        for i, review in enumerate(reviews, 1):
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                result = analyzer.analyze(review.text)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º
                old_label = review.sentiment_label
                review.sentiment_score = result['sentiment_score']
                review.sentiment_label = result['sentiment_label']
                
                # –°—á–µ—Ç—á–∏–∫–∏
                if result['sentiment_label'] == 'positive':
                    positive += 1
                elif result['sentiment_label'] == 'negative':
                    negative += 1
                else:
                    neutral += 1
                
                updated += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if old_label != result['sentiment_label']:
                    logger.info(f"[{i}/{total}] {old_label} ‚Üí {result['sentiment_label']}: {review.text[:50]}...")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤
                if i % 10 == 0:
                    db.session.commit()
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{total} ({i*100//total}%)")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}")
                errors += 1
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        db.session.commit()
        
        logger.info("\n" + "=" * 60)
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {updated}")
        logger.info(f"  –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {positive} ({positive*100//total if total > 0 else 0}%)")
        logger.info(f"  –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {negative} ({negative*100//total if total > 0 else 0}%)")
        logger.info(f"  –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {neutral} ({neutral*100//total if total > 0 else 0}%)")
        if errors > 0:
            logger.info(f"  –û—à–∏–±–æ–∫: {errors}")
        logger.info("=" * 60)
        logger.info("‚úì –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

def show_examples():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞"""
    
    logger.info("\n" + "=" * 60)
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
    logger.info("=" * 60)
    
    with app.app_context():
        analyzer = SentimentAnalyzer()
        
        # –ü—Ä–∏–º–µ—Ä—ã
        examples = [
            "–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –ë—ã—Å—Ç—Ä–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
            "–£–∂–∞—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –¥–æ–ª–≥–æ –∂–¥–∞–ª, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–≥.",
            "–¢–ù–° —ç–Ω–µ—Ä–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ.",
            "–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!",
            "–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∏–∫–æ–º—É.",
        ]
        
        for text in examples:
            result = analyzer.analyze(text)
            emoji = "üü¢" if result['sentiment_label'] == 'positive' else "üî¥" if result['sentiment_label'] == 'negative' else "‚ö™"
            logger.info(f"\n{emoji} {result['sentiment_label'].upper()} (score: {result['sentiment_score']:.2f})")
            logger.info(f"   –¢–µ–∫—Å—Ç: {text}")
            if 'debug' in result:
                debug = result['debug']
                logger.info(f"   Debug: pos={debug['positive_score']}, neg={debug['negative_score']}")

if __name__ == '__main__':
    try:
        import sys
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        show_examples()
        
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º --auto, –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if '--auto' in sys.argv:
            reanalyze_all()
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print("\n" + "=" * 60)
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --auto –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∞")
            print("–ü—Ä–∏–º–µ—Ä: python reanalyze_sentiment.py --auto")
            print("=" * 60)
            
    except KeyboardInterrupt:
        logger.info("\n\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\n–û—à–∏–±–∫–∞: {e}", exc_info=True)
