"""
–¢–µ—Å—Ç ML –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import sys
sys.stdout.reconfigure(encoding='utf-8')

from analyzers.ml_sentiment_analyzer import MLSentimentAnalyzer
import time

print("="*70)
print("–¢–ï–°–¢ ML –ú–û–î–ï–õ–ï–ô –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò")
print("="*70)

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
test_texts = {
    'positive': [
        "–¢–ù–° —ç–Ω–µ—Ä–≥–æ –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º, –ø–µ—Ä—Å–æ–Ω–∞–ª –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π!",
        "–ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º, —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!",
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é –¢–ù–° —ç–Ω–µ—Ä–≥–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."
    ],
    'negative': [
        "–¢–ù–° —ç–Ω–µ—Ä–≥–æ —É–∂–∞—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏ –≥—Ä—É–±—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.",
        "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é, –º–æ—à–µ–Ω–Ω–∏–∫–∏! –ù–∞—Å—á–∏—Ç–∞–ª–∏ –ª–∏—à–Ω–∏–µ –¥–µ–Ω—å–≥–∏.",
        "–ö–æ—à–º–∞—Ä, –Ω–µ–¥–µ–ª—é –±–µ–∑ —Å–≤–µ—Ç–∞, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç. –ë–µ–∑–æ–±—Ä–∞–∑–∏–µ!"
    ],
    'neutral': [
        "–¢–ù–° —ç–Ω–µ—Ä–≥–æ - —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–∞—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ.",
        "–û–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –≤ –æ—Ñ–∏—Å–µ –¢–ù–° —ç–Ω–µ—Ä–≥–æ.",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¢–ù–° —ç–Ω–µ—Ä–≥–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ."
    ]
}

print("\nüìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
print("-"*70)

try:
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    analyzer = MLSentimentAnalyzer(model_type='auto')
    
    model_info = analyzer.get_model_info()
    print(f"‚úì –ú–æ–¥–µ–ª—å: {model_info['model_type']}")
    print(f"‚úì –û–ø–∏—Å–∞–Ω–∏–µ: {model_info['description']}")
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–∞: {'–î–∞' if model_info['model_loaded'] else '–ù–µ—Ç'}")
    
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    sys.exit(1)

print("\n" + "="*70)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ü–†–ò–ú–ï–†–ê–•")
print("="*70)

def sentiment_emoji(label):
    """–≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    if label == 'positive':
        return 'üòä –ü–û–ó–ò–¢–ò–í–ù–û'
    elif label == 'negative':
        return 'üò† –ù–ï–ì–ê–¢–ò–í–ù–û'
    else:
        return 'üòê –ù–ï–ô–¢–†–ê–õ–¨–ù–û'

def score_bar(score):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è score"""
    normalized = (score + 1) / 2  # –û—Ç 0 –¥–æ 1
    bar_length = 20
    filled = int(normalized * bar_length)
    bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
    return bar

total_tests = 0
correct = 0

for expected_sentiment, texts in test_texts.items():
    print(f"\n{'='*70}")
    print(f"–¢–ï–°–¢: –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å = {expected_sentiment.upper()}")
    print('='*70)
    
    for i, text in enumerate(texts, 1):
        print(f"\n{i}. –¢–µ–∫—Å—Ç:")
        print(f"   \"{text}\"")
        print()
        
        start_time = time.time()
        result = analyzer.analyze(text)
        elapsed = time.time() - start_time
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {sentiment_emoji(result['sentiment_label'])}")
        print(f"   Score: {result['sentiment_score']:.3f} {score_bar(result['sentiment_score'])}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
        print(f"   –í—Ä–µ–º—è: {elapsed*1000:.1f}ms")
        print(f"   –ú–æ–¥–µ–ª—å: {result['model']}")
        
        total_tests += 1
        if result['sentiment_label'] == expected_sentiment:
            correct += 1
            print("   ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print(f"   ‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_sentiment})")

print("\n" + "="*70)
print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
print("="*70)
print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
print(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {correct/total_tests*100:.1f}%")
print(f"–ú–æ–¥–µ–ª—å: {analyzer.model_type}")

print("\n" + "="*70)
print("–°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
print("="*70)

print("\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏:")
print()
print("# RuBERT (–ª—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)")
print("analyzer = MLSentimentAnalyzer(model_type='rubert')")
print()
print("# Dostoevsky (–±—ã—Å—Ç—Ä–∞—è)")
print("analyzer = MLSentimentAnalyzer(model_type='dostoevsky')")
print()
print("# VADER (–¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π)")
print("analyzer = MLSentimentAnalyzer(model_type='vader')")
print()
print("# TextBlob (–ø—Ä–æ—Å—Ç–∞—è)")
print("analyzer = MLSentimentAnalyzer(model_type='textblob')")
print()
print("# –°–ª–æ–≤–∞—Ä–Ω—ã–π (fallback)")
print("analyzer = MLSentimentAnalyzer(model_type='dictionary')")

print("\n" + "="*70)
print("–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –°–ò–°–¢–ï–ú–£")
print("="*70)
print("\n–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
print()
print("1. –û—Ç–∫—Ä–æ–π—Ç–µ async_monitor_websocket.py")
print("2. –ó–∞–º–µ–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç:")
print("   from analyzers.sentiment_analyzer import SentimentAnalyzer")
print("   –Ω–∞:")
print("   from analyzers.ml_sentiment_analyzer import MLSentimentAnalyzer as SentimentAnalyzer")
print()
print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:")
print("   python app_enhanced.py")
print()
print("‚úÖ ML –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!")

print("\n" + "="*70)
print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
print("="*70)
