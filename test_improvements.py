"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π Telegram –∏ OK –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
"""
import logging
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_telegram_delays():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ"""
    logger.info("=" * 70)
    logger.info("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ Telegram –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ")
    logger.info("=" * 70)
    
    try:
        from collectors.telegram_user_collector import TelegramUserCollector
        import inspect
        
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
        source = inspect.getsource(TelegramUserCollector.search_in_channels)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
        if 'await asyncio.sleep(10)' in source:
            logger.info("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏: 10 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        elif 'await asyncio.sleep(3)' in source:
            logger.warning("‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏: 3 —Å–µ–∫—É–Ω–¥—ã (—Å—Ç–∞—Ä–∞—è)")
        else:
            logger.error("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if 'await asyncio.sleep(1)' in source:
            logger.info("‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 1 —Å–µ–∫—É–Ω–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        elif 'await asyncio.sleep(0.3)' in source:
            logger.warning("‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0.3 —Å–µ–∫—É–Ω–¥—ã (—Å—Ç–∞—Ä–∞—è)")
        
        logger.info("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 1 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

def test_ok_selenium_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OK Selenium"""
    logger.info("\n" + "=" * 70)
    logger.info("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OK Selenium")
    logger.info("=" * 70)
    
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ final_collection.py
    try:
        with open('final_collection.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'from collectors.ok_selenium_collector import OKSeleniumCollector' in content:
                logger.info("‚úÖ final_collection.py: OK Selenium –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                results['final_collection'] = True
            else:
                logger.warning("‚ö†Ô∏è final_collection.py: OK Selenium –Ω–µ –Ω–∞–π–¥–µ–Ω")
                results['final_collection'] = False
    except Exception as e:
        logger.error(f"‚ùå final_collection.py: {e}")
        results['final_collection'] = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ run_collection_once.py
    try:
        with open('run_collection_once.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'from collectors.ok_selenium_collector import OKSeleniumCollector' in content:
                logger.info("‚úÖ run_collection_once.py: OK Selenium –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                results['run_collection_once'] = True
            else:
                logger.warning("‚ö†Ô∏è run_collection_once.py: OK Selenium –Ω–µ –Ω–∞–π–¥–µ–Ω")
                results['run_collection_once'] = False
    except Exception as e:
        logger.error(f"‚ùå run_collection_once.py: {e}")
        results['run_collection_once'] = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ async_monitor_websocket.py
    try:
        with open('async_monitor_websocket.py', 'r', encoding='utf-8') as f:
            content = f.read()
            if 'from collectors.ok_selenium_collector import OKSeleniumCollector' in content:
                logger.info("‚úÖ async_monitor_websocket.py: OK Selenium –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                results['async_monitor'] = True
            else:
                logger.warning("‚ö†Ô∏è async_monitor_websocket.py: OK Selenium –Ω–µ –Ω–∞–π–¥–µ–Ω")
                results['async_monitor'] = False
    except Exception as e:
        logger.error(f"‚ùå async_monitor_websocket.py: {e}")
        results['async_monitor'] = False
    
    if all(results.values()):
        logger.info("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: OK Selenium –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Å–µ —Ñ–∞–π–ª—ã")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è –¢–ï–°–¢ 2 –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù: {sum(results.values())}/3 —Ñ–∞–π–ª–æ–≤")
        return False

def test_telegram_channels_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info("\n" + "=" * 70)
    logger.info("–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤")
    logger.info("=" * 70)
    
    try:
        from config import Config
        
        channels = Config.TELEGRAM_CHANNELS
        channel_count = len(channels) if channels else 0
        
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {channel_count}")
        
        if channel_count >= 60:
            logger.info("‚úÖ –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (60+) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç")
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–±–æ—Ä –∑–∞–π–º–µ—Ç 10+ –º–∏–Ω—É—Ç")
            logger.info("üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --no-telegram –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫")
        elif channel_count >= 15:
            logger.info("‚úÖ –°—Ä–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (15-60) - –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –æ—Ö–≤–∞—Ç–∞")
        elif channel_count >= 5:
            logger.info("‚úÖ –ú–∞–ª—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (5-15) - –±—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä")
        else:
            logger.warning("‚ö†Ô∏è –ú–∞–ª–æ –∫–∞–Ω–∞–ª–æ–≤ (<5) - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ—Ö–≤–∞—Ç")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
        if channels and len(channels) > 0:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤: {', '.join(channels[:10])}")
        
        logger.info("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 3 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

def test_ok_selenium_collector():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã OK Selenium –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    logger.info("\n" + "=" * 70)
    logger.info("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OK Selenium –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")
    logger.info("=" * 70)
    
    try:
        from collectors.ok_selenium_collector import OKSeleniumCollector
        
        logger.info("‚úÖ OK Selenium –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        collector = OKSeleniumCollector()
        
        required_methods = ['_init_driver', '_close_driver', 'search_ok', 'collect']
        for method in required_methods:
            if hasattr(collector, method):
                logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.error(f"‚ùå –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        logger.info("‚úÖ –¢–ï–°–¢ 4 –ü–†–û–ô–î–ï–ù")
        logger.info("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_ok_selenium.py")
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 4 –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OK Selenium –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ 4 –ü–†–û–í–ê–õ–ï–ù: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("\n")
    logger.info("*" * 70)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô TELEGRAM –ò OK –ö–û–õ–õ–ï–ö–¢–û–†–û–í")
    logger.info("*" * 70)
    logger.info("\n")
    
    results = {}
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results['telegram_delays'] = test_telegram_delays()
    results['ok_integration'] = test_ok_selenium_integration()
    results['telegram_config'] = test_telegram_channels_config()
    results['ok_collector'] = test_ok_selenium_collector()
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 70)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 70)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    
    if passed == total:
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.info("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        logger.info("   python final_collection.py")
        logger.info("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        logger.info("   TELEGRAM_OK_IMPROVEMENTS.md")
    else:
        logger.warning("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    
    logger.info("=" * 70)

if __name__ == '__main__':
    main()
