"""
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ML –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import sys
sys.stdout.reconfigure(encoding='utf-8')

import subprocess
import logging

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

print("="*70)
print("–£–°–¢–ê–ù–û–í–ö–ê ML –ú–û–î–ï–õ–ï–ô –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò")
print("="*70)

models = {
    'RuBERT': {
        'packages': ['transformers', 'torch', 'torchvision'],
        'description': '–õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (BERT)',
        'size': '~500MB',
        'speed': '–ú–µ–¥–ª–µ–Ω–Ω–∞—è',
        'accuracy': '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'
    },
    'Dostoevsky': {
        'packages': ['dostoevsky'],
        'description': '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ (FastText)',
        'size': '~50MB',
        'speed': '–ë—ã—Å—Ç—Ä–∞—è',
        'accuracy': '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ'
    },
    'VADER': {
        'packages': ['vaderSentiment'],
        'description': '–•–æ—Ä–æ—à–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)',
        'size': '~1MB',
        'speed': '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è',
        'accuracy': '‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ'
    },
    'TextBlob': {
        'packages': ['textblob'],
        'description': '–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è)',
        'size': '~5MB',
        'speed': '–ë—ã—Å—Ç—Ä–∞—è',
        'accuracy': '‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ'
    }
}

print("\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n")
for i, (name, info) in enumerate(models.items(), 1):
    print(f"{i}. {name}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
    print(f"   –†–∞–∑–º–µ—Ä: {info['size']}")
    print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {info['speed']}")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {info['accuracy']}")
    print(f"   –ü–∞–∫–µ—Ç—ã: {', '.join(info['packages'])}")
    print()

print("="*70)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø")
print("="*70)
print()
print("–î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ:")
print("1. RuBERT - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ã)")
print("2. Dostoevsky - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
print()
print("–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å:")
print("3. Dostoevsky - —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ")
print()

choice = input("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–°–ï –º–æ–¥–µ–ª–∏? (y/n): ").lower()

if choice == 'y':
    print("\n" + "="*70)
    print("–£–°–¢–ê–ù–û–í–ö–ê –ú–û–î–ï–õ–ï–ô")
    print("="*70)
    
    all_packages = set()
    for info in models.values():
        all_packages.update(info['packages'])
    
    for package in all_packages:
        print(f"\n[{package}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install', package
            ])
            print(f"‚úì {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError:
            print(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Åtoevsky
    if 'dostoevsky' in all_packages:
        print("\n[Dostoevsky] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'dostoevsky', 'download', 'fasttext-social-network-model'
            ])
            print("‚úì Dostoevsky –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except:
            print("‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Dostoevsky –º–æ–¥–µ–ª–∏ (–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)")
    
    print("\n" + "="*70)
    print("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("="*70)
    print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç:")
    print("python test_ml_sentiment.py")
    
else:
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("1 - RuBERT")
    print("2 - Dostoevsky (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("3 - VADER")
    print("4 - TextBlob")
    print("0 - –û—Ç–º–µ–Ω–∞")
    
    selected = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,3): ").strip()
    
    if selected and selected != '0':
        model_list = list(models.keys())
        selected_indices = [int(x.strip()) - 1 for x in selected.split(',') if x.strip().isdigit()]
        
        packages_to_install = set()
        for idx in selected_indices:
            if 0 <= idx < len(model_list):
                model_name = model_list[idx]
                packages_to_install.update(models[model_name]['packages'])
                print(f"‚úì –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        
        if packages_to_install:
            print("\n" + "="*70)
            print("–£–°–¢–ê–ù–û–í–ö–ê –í–´–ë–†–ê–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
            print("="*70)
            
            for package in packages_to_install:
                print(f"\n[{package}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                try:
                    subprocess.check_call([
                        sys.executable, '-m', 'pip', 'install', package
                    ])
                    print(f"‚úì {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.CalledProcessError:
                    print(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
            
            print("\n" + "="*70)
            print("‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("="*70)
            print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç:")
            print("python test_ml_sentiment.py")
    else:
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

print("\n" + "="*70)
print("–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞")
print("="*70)
print("\n–î–ª—è RuBERT:")
print("pip install transformers torch")
print("\n–î–ª—è Dostoevsky (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
print("pip install dostoevsky")
print("python -m dostoevsky download fasttext-social-network-model")
print("\n–î–ª—è VADER:")
print("pip install vaderSentiment")
print("\n–î–ª—è TextBlob:")
print("pip install textblob")
print("="*70)
