"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
"""
import sys
import os
import logging
import argparse
from datetime import datetime
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv(override=True)

from models import db, Review, MonitoringLog
from collectors.vk_collector import VKCollector
from collectors.telegram_user_collector import TelegramUserCollector
from collectors.news_collector import NewsCollector
from collectors.zen_collector import ZenCollector
from collectors.zen_selenium_collector import ZenSeleniumCollector
try:
    from collectors.ok_selenium_collector import OKSeleniumCollector as OKAPICollector
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OK Selenium –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (–æ–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API)")
except ImportError:
    try:
        from collectors.ok_api_collector import OKAPICollector
        logger.warning("OK Selenium –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–æ–ª–ª–µ–∫—Ç–æ—Ä (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)")
    except ImportError:
        from collectors.ok_collector import OKCollector as OKAPICollector
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π OK –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
from analyzers.sentiment_analyzer import SentimentAnalyzer
from analyzers.moderator import Moderator

# –ò–º–ø–æ—Ä—Ç app —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from app_enhanced import app
except ImportError:
    try:
        from app import app
    except ImportError:
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π app context –µ—Å–ª–∏ app –Ω–µ –Ω–∞–π–¥–µ–Ω
        from flask import Flask
        from models import db
        from config import Config
        app = Flask(__name__)
        app.config['SQLALCHEMY_DATABASE_URI'] = Config.DATABASE_URL
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        db.init_app(app)

def main():
    # Parse arguments
    parser = argparse.ArgumentParser(description='–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')
    parser.add_argument('--comments', action='store_true', 
                       help='[–£—Å—Ç–∞—Ä–µ–ª–æ] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞')
    parser.add_argument('--no-vk', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å VK')
    parser.add_argument('--no-telegram', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å Telegram')
    parser.add_argument('--no-news', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
    parser.add_argument('--no-zen', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω')
    parser.add_argument('--no-ok', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏')
    parser.add_argument('--zen-selenium', action='store_true', 
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Selenium –¥–ª—è –î–∑–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    parser.add_argument('--zen-simple', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –î–∑–µ–Ω–∞ (–±–µ–∑ Selenium, –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)')
    args = parser.parse_args()
    
    logger.info("\n" + "=" * 70)
    logger.info("–§–ò–ù–ê–õ–¨–ù–´–ô –°–ë–û–† –î–ê–ù–ù–´–• –ò–ó –í–°–ï–• –ò–°–¢–û–ß–ù–ò–ö–û–í")
    collect_comments = True
    if args.comments:
        logger.info("–§–ª–∞–≥ --comments —É—Å—Ç–∞—Ä–µ–ª: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    if collect_comments:
        logger.info("–†–µ–∂–∏–º: –° –ü–ê–†–°–ò–ù–ì–û–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ)")
    logger.info("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    logger.info(f"\nTelegram API ID: {api_id}")
    logger.info(f"Telegram API Hash: {api_hash[:10] if api_hash else 'NOT SET'}...")
    logger.info(f"Telegram Phone: {os.getenv('TELEGRAM_PHONE')}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    os.environ['USE_FREE_PROXIES'] = 'False'
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    vk_collector = VKCollector()
    telegram_collector = TelegramUserCollector()
    news_collector = NewsCollector()
    news_collector.use_free_proxies = False
    news_collector.current_proxy = None
    
    # –í—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –î–∑–µ–Ω–∞
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Selenium –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏
    if args.zen_simple:
        logger.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –î–∑–µ–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–ø—á–∞)")
        zen_collector = ZenCollector()
    else:
        logger.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Selenium –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω (–æ–±—Ö–æ–¥ –∫–∞–ø—á–∏)")
        zen_collector = ZenSeleniumCollector()
    
    ok_collector = OKAPICollector()
    
    sentiment_analyzer = SentimentAnalyzer()
    moderator = Moderator()
    
    all_reviews = []
    
    # 1. VK
    if not args.no_vk:
        logger.info("\n" + "=" * 70)
        logger.info("1Ô∏è‚É£  –°–ë–û–† –ò–ó VK")
        logger.info("=" * 70)
        try:
            vk_reviews = vk_collector.collect()
            logger.info(f"‚úì VK: –Ω–∞–π–¥–µ–Ω–æ {len(vk_reviews)} –æ—Ç–∑—ã–≤–æ–≤")
            all_reviews.extend(vk_reviews)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ VK: {e}")
    
    # 2. Telegram
    if not args.no_telegram:
        logger.info("\n" + "=" * 70)
        logger.info("2Ô∏è‚É£  –°–ë–û–† –ò–ó TELEGRAM")
        logger.info("(—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏/–æ—Ç–≤–µ—Ç–∞–º–∏)")
        logger.info("=" * 70)
        logger.info("–ö–∞–Ω–∞–ª—ã: @moynizhny, @bez_cenz_nn, @today_nn, @nizhniy_smi, @nn52signal")
        try:
            tg_reviews = telegram_collector.collect(collect_comments=collect_comments)
            messages = [r for r in tg_reviews if not r.get('is_comment', False)]
            comments = [r for r in tg_reviews if r.get('is_comment', False)]
            logger.info(f"‚úì Telegram: –Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            logger.info(f"‚úì Telegram: –Ω–∞–π–¥–µ–Ω–æ {len(comments)} –æ—Ç–≤–µ—Ç–æ–≤")
            all_reviews.extend(tg_reviews)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ Telegram: {e}")
            import traceback
            traceback.print_exc()
    
    # 3. –ù–æ–≤–æ—Å—Ç–∏
    if not args.no_news:
        logger.info("\n" + "=" * 70)
        logger.info("3Ô∏è‚É£  –°–ë–û–† –ù–û–í–û–°–¢–ï–ô (Google News)")
        logger.info("(—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)")
        logger.info("=" * 70)
        try:
            news = news_collector.collect_with_comments()
            articles = [r for r in news if not r.get('is_comment', False)]
            comments = [r for r in news if r.get('is_comment', False)]
            logger.info(f"‚úì –ù–æ–≤–æ—Å—Ç–∏: –Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            logger.info(f"‚úì –ù–æ–≤–æ—Å—Ç–∏: –Ω–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            all_reviews.extend(news)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    
    # 4. –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω
    if not args.no_zen:
        logger.info("\n" + "=" * 70)
        logger.info("4Ô∏è‚É£  –°–ë–û–† –ò–ó –Ø–ù–î–ï–ö–°.–î–ó–ï–ù")
        logger.info("(—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)")
        logger.info("=" * 70)
        try:
            zen = zen_collector.collect(collect_comments=collect_comments)
            articles = [r for r in zen if not r.get('is_comment', False)]
            comments = [r for r in zen if r.get('is_comment', False)]
            logger.info(f"‚úì –î–∑–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            logger.info(f"‚úì –î–∑–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            all_reviews.extend(zen)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –î–∑–µ–Ω: {e}")
    
    # 5. –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏
    if not args.no_ok:
        logger.info("\n" + "=" * 70)
        logger.info("5Ô∏è‚É£  –°–ë–û–† –ò–ó –û–î–ù–û–ö–õ–ê–°–°–ù–ò–ö–û–í")
        logger.info("=" * 70)
        try:
            ok_posts = ok_collector.collect()
            logger.info(f"‚úì –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: –Ω–∞–π–¥–µ–Ω–æ {len(ok_posts)} –ø–æ—Å—Ç–æ–≤")
            all_reviews.extend(ok_posts)
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {e}")
            import traceback
            traceback.print_exc()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    logger.info("\n" + "=" * 70)
    logger.info("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
    logger.info("=" * 70)
    logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_reviews)} –∑–∞–ø–∏—Å–µ–π")
    
    saved = 0
    parent_mapping = {}
    
    with app.app_context():
        for review_data in all_reviews:
            existing = Review.query.filter_by(source_id=review_data['source_id']).first()
            if existing:
                # Store mapping for parent-child relationships
                if not review_data.get('is_comment', False):
                    parent_mapping[review_data['source_id']] = existing.id
                continue
            
            sentiment = sentiment_analyzer.analyze(review_data['text'])
            keywords = sentiment_analyzer.extract_keywords(review_data['text'])
            
            moderation_status, moderation_reason, requires_manual = moderator.moderate(
                review_data['text'],
                sentiment['sentiment_score']
            )
            
            # Determine parent_id for comments
            parent_id = None
            if review_data.get('is_comment', False):
                parent_source_id = review_data.get('parent_source_id')
                if parent_source_id:
                    # Try to find in mapping first
                    parent_id = parent_mapping.get(parent_source_id)
                    # If not in mapping, query database
                    if not parent_id:
                        parent = Review.query.filter_by(source_id=parent_source_id).first()
                        if parent:
                            parent_id = parent.id
                            parent_mapping[parent_source_id] = parent_id
            
            review = Review(
                source=review_data['source'],
                source_id=review_data['source_id'],
                author=review_data.get('author'),
                author_id=review_data.get('author_id'),
                text=review_data['text'],
                url=review_data.get('url'),
                published_date=review_data.get('published_date'),
                sentiment_score=sentiment['sentiment_score'],
                sentiment_label=sentiment['sentiment_label'],
                keywords=','.join(keywords) if keywords else None,
                moderation_status=moderation_status,
                moderation_reason=moderation_reason,
                requires_manual_review=requires_manual,
                processed=not requires_manual,
                parent_id=parent_id,
                is_comment=review_data.get('is_comment', False)
            )
            
            db.session.add(review)
            saved += 1
            
            # Store new parent for future children
            if not review_data.get('is_comment', False):
                db.session.flush()
                parent_mapping[review_data['source_id']] = review.id
        
        db.session.commit()
        
        total = Review.query.count()
        articles_count = Review.query.filter_by(is_comment=False).count()
        comments_count = Review.query.filter_by(is_comment=True).count()
        
        vk_count = Review.query.filter_by(source='vk', is_comment=False).count()
        tg_count = Review.query.filter_by(source='telegram', is_comment=False).count()
        news_count = Review.query.filter(Review.source.in_(['news', 'web']), Review.is_comment==False).count()
        zen_count = Review.query.filter_by(source='zen', is_comment=False).count()
        ok_count = Review.query.filter_by(source='ok', is_comment=False).count()
        
        positive = Review.query.filter_by(sentiment_label='positive').count()
        negative = Review.query.filter_by(sentiment_label='negative').count()
        neutral = Review.query.filter_by(sentiment_label='neutral').count()
        
        logger.info("\n" + "=" * 70)
        logger.info("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ê")
        logger.info("=" * 70)
        logger.info(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö: {saved}")
        logger.info(f"‚úì –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {total} ({articles_count} —Å—Ç–∞—Ç–µ–π, {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
        logger.info(f"\nüìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        logger.info(f"   VK: {vk_count}")
        logger.info(f"   Telegram: {tg_count}")
        logger.info(f"   –ù–æ–≤–æ—Å—Ç–∏: {news_count}")
        logger.info(f"   –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω: {zen_count}")
        logger.info(f"   –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {ok_count}")
        logger.info(f"\nüòä –ü–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        logger.info(f"   –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {positive}")
        logger.info(f"   –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {negative}")
        logger.info(f"   –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {neutral}")
        logger.info("\nüí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ")
        logger.info("\n‚úì –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
        logger.info("   python app.py")
        logger.info("   http://localhost:5000")
        logger.info("=" * 70)

if __name__ == '__main__':
    main()
